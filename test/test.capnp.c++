// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capnp

#include "test.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<29> b_8c5cf3e5032e3435 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53,  52,  46,   3, 229, 243,  92, 140,
     11,   0,   0,   0,   3,   0,   0,   0,
     95, 172, 201, 253, 195, 122, 193, 209,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110, 112,  58,  84, 101, 115, 116,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153, 229, 125,  88,  34,  52,  54, 140,
    224,  73, 106,  66,  18, 130, 194, 140,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    101,  99, 104, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8c5cf3e5032e3435 = b_8c5cf3e5032e3435.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8c5cf3e5032e3435[] = {
  &s_8c363422587de599,
  &s_8cc28212426a49e0,
};
static const uint16_t m_8c5cf3e5032e3435[] = {0};
const ::capnp::_::RawSchema s_8c5cf3e5032e3435 = {
  0x8c5cf3e5032e3435, b_8c5cf3e5032e3435.words, 29, d_8c5cf3e5032e3435, m_8c5cf3e5032e3435,
  2, 1, nullptr, nullptr, nullptr, { &s_8c5cf3e5032e3435, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_8c363422587de599 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153, 229, 125,  88,  34,  52,  54, 140,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110, 112,  58,  84, 101, 115, 116,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
     46, 101,  99, 104, 111,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8c363422587de599 = b_8c363422587de599.words;
#if !CAPNP_LITE
static const uint16_t m_8c363422587de599[] = {0};
static const uint16_t i_8c363422587de599[] = {0};
const ::capnp::_::RawSchema s_8c363422587de599 = {
  0x8c363422587de599, b_8c363422587de599.words, 33, nullptr, m_8c363422587de599,
  0, 1, i_8c363422587de599, nullptr, nullptr, { &s_8c363422587de599, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_8cc28212426a49e0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224,  73, 106,  66,  18, 130, 194, 140,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110, 112,  58,  84, 101, 115, 116,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
     46, 101,  99, 104, 111,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cc28212426a49e0 = b_8cc28212426a49e0.words;
#if !CAPNP_LITE
static const uint16_t m_8cc28212426a49e0[] = {0};
static const uint16_t i_8cc28212426a49e0[] = {0};
const ::capnp::_::RawSchema s_8cc28212426a49e0 = {
  0x8cc28212426a49e0, b_8cc28212426a49e0.words, 33, nullptr, m_8cc28212426a49e0,
  0, 1, i_8cc28212426a49e0, nullptr, nullptr, { &s_8cc28212426a49e0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::TestInterface::EchoParams,  ::TestInterface::EchoResults>
TestInterface::Client::echoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::TestInterface::EchoParams,  ::TestInterface::EchoResults>(
      0x8c5cf3e5032e3435ull, 0, sizeHint);
}
::kj::Promise<void> TestInterface::Server::echo(EchoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "test.capnp:TestInterface", "echo",
      0x8c5cf3e5032e3435ull, 0);
}
::capnp::Capability::Server::DispatchCallResult TestInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8c5cf3e5032e3435ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("test.capnp:TestInterface", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TestInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        echo(::capnp::Capability::Server::internalGetTypedContext<
             ::TestInterface::EchoParams,  ::TestInterface::EchoResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "test.capnp:TestInterface",
          0x8c5cf3e5032e3435ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TestInterface
#if !CAPNP_LITE
constexpr ::capnp::Kind TestInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestInterface::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestInterface::EchoParams
constexpr uint16_t TestInterface::EchoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TestInterface::EchoParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestInterface::EchoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestInterface::EchoParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestInterface::EchoResults
constexpr uint16_t TestInterface::EchoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TestInterface::EchoResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestInterface::EchoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestInterface::EchoResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



