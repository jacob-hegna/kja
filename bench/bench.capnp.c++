// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: bench.capnp

#include "bench.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<29> b_8c4339370ed9b151 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     81, 177, 217,  14,  55,  57,  67, 140,
     12,   0,   0,   0,   3,   0,   0,   0,
    120,  29,  72, 165, 153, 209,  62, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 101, 110,  99, 104,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     73, 110, 116, 101, 114, 102,  97,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197, 134,  28, 145, 206, 193, 142, 245,
    202, 171,  42, 228,  61, 128, 102, 178,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    101,  99, 104, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8c4339370ed9b151 = b_8c4339370ed9b151.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8c4339370ed9b151[] = {
  &s_b266803de42aabca,
  &s_f58ec1ce911c86c5,
};
static const uint16_t m_8c4339370ed9b151[] = {0};
const ::capnp::_::RawSchema s_8c4339370ed9b151 = {
  0x8c4339370ed9b151, b_8c4339370ed9b151.words, 29, d_8c4339370ed9b151, m_8c4339370ed9b151,
  2, 1, nullptr, nullptr, nullptr, { &s_8c4339370ed9b151, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_f58ec1ce911c86c5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 134,  28, 145, 206, 193, 142, 245,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 101, 110,  99, 104,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     73, 110, 116, 101, 114, 102,  97,  99,
    101,  46, 101,  99, 104, 111,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f58ec1ce911c86c5 = b_f58ec1ce911c86c5.words;
#if !CAPNP_LITE
static const uint16_t m_f58ec1ce911c86c5[] = {0};
static const uint16_t i_f58ec1ce911c86c5[] = {0};
const ::capnp::_::RawSchema s_f58ec1ce911c86c5 = {
  0xf58ec1ce911c86c5, b_f58ec1ce911c86c5.words, 33, nullptr, m_f58ec1ce911c86c5,
  0, 1, i_f58ec1ce911c86c5, nullptr, nullptr, { &s_f58ec1ce911c86c5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_b266803de42aabca = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    202, 171,  42, 228,  61, 128, 102, 178,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 101, 110,  99, 104,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     73, 110, 116, 101, 114, 102,  97,  99,
    101,  46, 101,  99, 104, 111,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b266803de42aabca = b_b266803de42aabca.words;
#if !CAPNP_LITE
static const uint16_t m_b266803de42aabca[] = {0};
static const uint16_t i_b266803de42aabca[] = {0};
const ::capnp::_::RawSchema s_b266803de42aabca = {
  0xb266803de42aabca, b_b266803de42aabca.words, 33, nullptr, m_b266803de42aabca,
  0, 1, i_b266803de42aabca, nullptr, nullptr, { &s_b266803de42aabca, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::TestInterface::EchoParams,  ::TestInterface::EchoResults>
TestInterface::Client::echoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::TestInterface::EchoParams,  ::TestInterface::EchoResults>(
      0x8c4339370ed9b151ull, 0, sizeHint);
}
::kj::Promise<void> TestInterface::Server::echo(EchoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "bench.capnp:TestInterface", "echo",
      0x8c4339370ed9b151ull, 0);
}
::capnp::Capability::Server::DispatchCallResult TestInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8c4339370ed9b151ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("bench.capnp:TestInterface", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TestInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        echo(::capnp::Capability::Server::internalGetTypedContext<
             ::TestInterface::EchoParams,  ::TestInterface::EchoResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "bench.capnp:TestInterface",
          0x8c4339370ed9b151ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TestInterface
#if !CAPNP_LITE
constexpr ::capnp::Kind TestInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestInterface::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestInterface::EchoParams
constexpr uint16_t TestInterface::EchoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TestInterface::EchoParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestInterface::EchoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestInterface::EchoParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestInterface::EchoResults
constexpr uint16_t TestInterface::EchoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TestInterface::EchoResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestInterface::EchoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestInterface::EchoResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



